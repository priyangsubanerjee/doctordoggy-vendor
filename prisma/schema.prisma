// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Partner {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  regisNo        String?
  password       String?
  address        String
  pincode        String
  city           String
  state          String
  country        String
  landmark       String?
  phone          String
  email          String?   @unique
  verified       Boolean   @default(false)
  doesHaveClinic Boolean   @default(false)
  gstin          String?
  tradeLicense   String?
  images         String[]
  staffCount     String?
  workingDays    String[]
  servicesPromised String[]
  services       Service[]
  createdAt      DateTime  @default(now())
  agreedTerms    Boolean  @default(false)
}

model Service {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         String
  description  String?
  image        String[]
  partner      Partner  @relation(fields: [partnerId], references: [id])
  partnerId String  @db.ObjectId
  estDuration     String
  estPrice        Int
  createdAt    DateTime @default(now())
  isActive       String?  @default("active")
  daysActive   String[]
  hoursActive  String[]
  isPromoted   Boolean  @default(false)
  prmotionEndsAt DateTime? 
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  publicId  String
  url       String   @unique
  createdAt DateTime @default(now())
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String
  phone         String?
  zipCode       String?
  address       String?
  createdAt     DateTime       @default(now())
  pets          Pet[]
  vaccines      Vaccination[]
  prescriptions Prescription[]
  dewormings    Deworming[]
  pathologies   Pathology[]
  tokens        Token[]
}

model Pet {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  image         String
  name          String
  sex           String?
  bodyWeight    String?
  Parent        User?          @relation(fields: [parentEmail], references: [email])
  parentEmail   String?
  breed         String
  dateOfBirth   DateTime
  color         String?
  species       String
  createdBy     String?
  createdAt     DateTime       @default(now())
  isPublic      Boolean        @default(true)
  vaccines      Vaccination[]
  prescriptions Prescription[]
  dewormings    Deworming[]
  pathologies   Pathology[]
}

model Vaccination {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  image            String
  pet              Pet       @relation(fields: [petId], references: [id])
  petId            String    @db.ObjectId
  Parent           User?     @relation(fields: [parentEmail], references: [email])
  parentEmail      String?
  vaccineName      String
  bodyWeight       String?
  bodyTemperature  String?
  files            String[]
  notes            String?
  status           String?
  dueDate          DateTime
  doneDate         DateTime?
  doneAt           String?
  doneBy           String?
  doctorsSignature String?
  createdAt        DateTime  @default(now())
}

model Prescription {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  image           String?
  name            String?
  pet             Pet      @relation(fields: [petId], references: [id])
  petId           String   @db.ObjectId
  Parent          User?    @relation(fields: [parentEmail], references: [email])
  parentEmail     String?
  reasonOfVisit   String
  dateOfVisit     DateTime
  bodyWeight      String?
  temperature     String?
  files           String[]
  notes           String?
  doctorName      String?
  doctorSignature String?
  doctorId        String?
}

model Deworming {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String
  pet          Pet       @relation(fields: [petId], references: [id])
  petId        String    @db.ObjectId
  Parent       User?     @relation(fields: [parentEmail], references: [email])
  parentEmail  String?
  bodyWeight   String?
  files        String[]
  medicineName String
  dosage       String
  notes        String?
  status       String?
  dueDate      DateTime
  doneDate     DateTime?
}

model Pathology {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String
  pet          Pet      @relation(fields: [petId], references: [id])
  petId        String   @db.ObjectId
  Parent       User?    @relation(fields: [parentEmail], references: [email])
  date         DateTime
  testName     String?
  parentEmail  String?
  bodyWeight   String?
  temperature  String?
  files        String[]
  refererredBy String?
  notes        String?
  createdAt    DateTime @default(now())
}

model Breed {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  type String?
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [email], references: [email])
  email     String   @unique
  tokens    String[]
  createdAt DateTime @default(now())
}

model Booster {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String[]
  description String?
  createdAt   DateTime @default(now())
}

model Dewormer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String
  image       String[]
  description String?
  createdAt   DateTime @default(now())
}
